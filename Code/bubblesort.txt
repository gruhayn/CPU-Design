DFN v_dizi 2 -9 1 3
DFN v_boyut 4

//set stack pointer
ldil 65535 //ffffh
ldih 65535 //ffffh
mov rli, sp 

ASSIGN shDiziAdres, R1
ASSIGN c, R2
ASSIGN n, R3
ASSIGN d, R4
ASSIGN swap, AX1

//shDiziAdres dizinin baslangic adresi
SETADDL v_dizi
SETADDH v_dizi
MOV RADR, shDiziAdres

//c=0
LDIL 0
LDIH 0
MOV RLI, c

//n=dizinin boyutu
SETADDL v_boyut
SETADDH v_boyut
GETDATA RADR, n
//n=n-1
DEC n									// for (c = 0 ; c < n - 1; c++)
for1:									 
									  // {
	SETADDL endfor1
	SETADDH endfor1
	CMP c,n  	
	JAE RADR	//if c>=n-1 go to endfor1							 
	//d=0
	MOV RLI, d							 
									    // for (d = 0 ; d < n - c - 1; d++)
	for2:									 
									    // {
		// AX2 = n - 1
		MOV n, AX2
		// AX2 = c - AX2 = c - n +1
		SUB c, AX2
		// AX2= -AX2 = n - c + 1
		NEG AX2
		SETADDL endfor2
		SETADDH endfor2
		CMP d, AX2
		JAE RADR	//if d>=n-c-1 go to endfor2							 			      	
		// AX2 = &array[0]
		MOV shDiziAdres,AX2
		// AX2 = &array[d]
		ADD d, AX2
		// BX2 = &array[d+1]
		MOV AX2,BX2
		INC BX2
		//CX2 = array[d]
		GETDATA AX2, CX2
		//DX2 = array[d+1]
		GETDATA BX2, DX2
		SETADDL endif
		SETADDH endif
		CMP CX2,DX2
		if:
		JLE RADR	// if array[d]<=array[d+1] go to endif 
											// if (array[d] > array[d+1]) /* For decreasing order use < */
											// {
			MOV CX2,swap						// swap = array[d];
			MOV DX2, CX2						// array[d]   = array[d+1];
			MOV swap,DX2						// array[d+1] = swap;
			SETDATA CX2,AX2
			SETDATA DX2,BX2
		endif:								// }				    		
		INC d
		SETADDL for2
		SETADDH for2
		JMP RADR
endfor2:
								    		// }
		INC c
		SETADDL for1
		SETADDH for1 
		JMP RADR 				  	
endfor1:
								  		// }
								  	
//c=0
MOV RLI,c

for3:
	SETADDL endfor3
	SETADDH endfor3
	CMP c,n 
	JA RADR // if c> n-1 go to endfor3
	GETDATA shDiziAdres,AX2
	INC shDiziAdres
	INC c
endfor3:

halt


